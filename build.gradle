plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'org.asciidoctor.convert' version '2.2.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'com.juno'
version = '1.0'
sourceCompatibility = '11'

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/*Advice*',
                            '**/dto/**',
                            '**/vo/**',
                            '**/enums/**',
                            '**/api/**',
                            '**/config/**',
                            '**/entity/**/Q**',
                            '**/entity/member/Member*',
                            '**/TokenInterceptor*',
                            '**/security/**',
                            // ...
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Advice',
                    '*.dto.*',
                    '*.vo.*',
                    '*.enums.*',
                    '*.api.*',
                    '*.config.*',
                    '*.security.*',
                    '*.entity.*.Q*',
                    '*.entity.member.Member',
                    '*.TokenInterceptor',
            ]

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }

        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.*Application',
                    '*.*Exception',
                    '*.*Advice',
                    '*.dto.*',
                    '*.vo.*',
                    '*.enums.*',
                    '*.api.*',
                    '*.config.*',
                    '*.security.*',
                    '*.entity.*.Q*',
                    '*.entity.member.Member',
                    '*.TokenInterceptor',
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation "com.querydsl:querydsl-jpa:5.0.0"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0"
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation "org.testcontainers:testcontainers:1.18.0"
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// script for querydsl
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
